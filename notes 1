1 Printing output in a Java program can be done using the following three commands: System.out.print(), System.out.println(), and System.out.printf()
The Scanner class is built into Java and is useful for reading input from different sources including user input, and text files.
FileWriter is used to output data from a program into a file on your computer, and FileReader is used to read from a file.
They both are specifically tailored to reading and writing character/text data to files.
IOExceptions are exceptions related to input or output that a program may encounter. They can be handled by a programmer using try-catch blocks.
Java programs must initially be compiled into Java byte code before they can be run using a terminal or command prompt. When running a Java program, a user can pass in multiple arguments through the command line.



Serializable Fields
When serializing objects, we often need to handle static class fields or exclude non-static fields in the serialization. Recall that the JVM defines a default way of serializing objects; this default includes ignoring static class fields, which belong to a class and not an object. The JVM also serializes all fields in an object, even those marked private and final.

Although the JVM implicitly serializes non-static fields, we can instruct the JVM to ignore them using the transient keyword. A field marked as transient will have its value ignored during serialization and instead receive the default value for that type of field.


Java makes serialization easy using the Serializable interface.
The Serializable interface is a marker interface and requires no methods to be implemented.
To use FileOutputStream and ObjectOutputStream to serialize objects to a file.
To use FileInputStream and ObjectInputStream to deserialize objects from a file.
static and transient fields are not serializable.
The JVM handles serializing objects with reference type fields.
To implement writeObject() to customize the serialization of an object to handle non-serializable fields.
To implement readObject() to customize the deserialization of an object with non-serializable fields.
Knowing these topics will improve your mastery of Java and allow you to persist your objects past program termination or transport them over a network.
